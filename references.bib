@article{how-programmers-interact-with-code-generation-models,
 author = "Shraddha Barke, Michael B. James, Nadia Polikarpova",
 title = {{Grounded Copilot: How Programmers Interact with Code-Generating Models}},
 url = "https://arxiv.org/abs/2206.15000",
 year = "2022",
}
@article{elaborator-reflection-extending-idris-in-idris,
author = {Christiansen, David and Brady, Edwin},
title = {Elaborator Reflection: Extending Idris in Idris},
year = {2016},
issue_date = {September 2016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {51},
number = {9},
issn = {0362-1340},
url = {https://doi.org/10.1145/3022670.2951932},
doi = {10.1145/3022670.2951932},
abstract = {Many programming languages and proof assistants are defined by elaboration from a high-level language with a great deal of implicit information to a highly explicit core language. In many advanced languages, these elaboration facilities contain powerful tools for program construction, but these tools are rarely designed to be repurposed by users. We describe elaborator reflection, a paradigm for metaprogramming in which the elaboration machinery is made directly available to metaprograms, as well as a concrete realization of elaborator reflection in Idris, a functional language with full dependent types. We demonstrate the applicability of Idris’s reflected elaboration framework to a number of realistic problems, we discuss the motivation for the specific features of its design, and we explore the broader meaning of elaborator reflection as it can relate to other languages.},
journal = {SIGPLAN Not.},
month = {sep},
pages = {284–297},
numpages = {14},
}
@InProceedings{tactic-language-for-the-system-coq,
author="Delahaye, David",
editor="Parigot, Michel
and Voronkov, Andrei",
title="{A Tactic Language for the System Coq}",
booktitle="Logic for Programming and Automated Reasoning",
year="2000",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="85--95",
abstract="We propose a new tactic language for the system Coq, which is intended to enrich the current tactic combinators (tacticals). This language is based on a functional core with recursors and matching operators for Coq terms but also for proof contexts. It can be used directly in proof scripts or in toplevel definitions (tactic definitions). We show that the implementation of this language involves considerable changes in the interpretation of proof scripts, essentially due to the matching operators. We give some examples which solve small proof parts locally and some others which deal with non-trivial problems. Finally, we discuss the status of this meta-language with respect to the Coq language and the implementation language of Coq.",
isbn="978-3-540-44404-6"
}
@InProceedings{auto-in-agda,
author="Kokke, Wen
and Swierstra, Wouter",
editor="Hinze, Ralf
and Voigtl{\"a}nder, Janis",
title="{Auto in Agda}",
booktitle="Mathematics of Program Construction",
year="2015",
publisher="Springer International Publishing",
address="Cham",
pages="276--301",
abstract="As proofs in type theory become increasingly complex, there is a growing need to provide better proof automation. This paper shows how to implement a Prolog-style resolution procedure in the dependently typed programming language Agda. Connecting this resolution procedure to Agda's reflection mechanism provides a first-class proof search tactic for first-order Agda terms. As a result, writing proof automation tactics need not be different from writing any other program.",
isbn="978-3-319-19797-5"
}
@article{affine-type-system-with-hindley-milner,
author = {Li, Gonglin},
year = {2022},
month = {03},
pages = {},
title = {{An Affine Type System with Hindley-Milner Style Type Inference}}
}
@techreport{proof-procedure-for-the-logic-of-hereditary-harrop-formulas,
author = {Nadathur, Gopalan},
title = {{A Proof Procedure for the Logic of Hereditary Harrop Formulas}},
year = {1992},
publisher = {Duke University},
address = {USA},
pages = {204-209}
}
@article{propositions-as-types,
author = {Wadler, Philip},
title = {{Propositions as Types}},
year = {2015},
issue_date = {December 2015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {58},
number = {12},
issn = {0001-0782},
url = {https://doi.org/10.1145/2699407},
doi = {10.1145/2699407},
abstract = {Connecting mathematical logic and computation, it ensures that some aspects of programming are absolute.},
journal = {Commun. ACM},
month = {nov},
pages = {75–84},
numpages = {10}
}
@book{design-patterns-elements-of-reusable-oo-software,
  title={Design Patterns: Elements of Reusable Object-Oriented Software},
  author={Gamma, E. and Helm, R. and Johnson, R. and Vlissides, J.},
  isbn={9783827330437},
  lccn={94334264},
  series={Addison-Wesley professional computing series},
  url={https://books.google.ee/books?id=tmNNfSkfTlcC},
  year={1995},
  publisher={Addison-Wesley}
}
@InProceedings{tool-for-automated-theorem-proving-in-agda,
author="Lindblad, Fredrik
and Benke, Marcin",
editor="Filli{\^a}tre, Jean-Christophe
and Paulin-Mohring, Christine
and Werner, Benjamin",
title="A Tool for Automated Theorem Proving in Agda",
booktitle="Types for Proofs and Programs",
year="2006",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="154--169",
isbn="978-3-540-31429-5"
}
@InProceedings{dependently-typed-programming-in-agda,
author="Bove, Ana
and Dybjer, Peter
and Norell, Ulf",
editor="Berghofer, Stefan
and Nipkow, Tobias
and Urban, Christian
and Wenzel, Makarius",
title="A Brief Overview of Agda -- A Functional Language with Dependent Types",
booktitle="Theorem Proving in Higher Order Logics",
year="2009",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="73--78",
isbn="978-3-642-03359-9",
url="https://doi.org/10.1007/978-3-642-03359-9_6"
}
@InProceedings{mimer,
author="Skystedt, Lukas",
title="A New Synthesis Tool for Agda",
year="2022",
url="https://hdl.handle.net/20.500.12380/305712"
}
@article{smyth,
author = {Lubin, Justin and Collins, Nick and Omar, Cyrus and Chugh, Ravi},
title = {Program sketching with live bidirectional evaluation},
year = {2020},
issue_date = {August 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {ICFP},
url = {https://doi.org/10.1145/3408991},
doi = {10.1145/3408991},
journal = {Proc. ACM Program. Lang.},
month = {aug},
articleno = {109},
numpages = {29},
keywords = {Sketches, Program Synthesis, Examples, Bidirectional Evaluation}
}

  

